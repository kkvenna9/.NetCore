#pragma checksum "C:\Users\adsa\source\repos\Git\.NetCore\DemoDockerComposeOnAzure\WeatherPortal\Pages\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "f7d2749b87c136fb5bdfa04a5d164da3f2f6a301"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(WeatherPortal.Pages.Pages_Index), @"mvc.1.0.razor-page", @"/Pages/Index.cshtml")]
namespace WeatherPortal.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\adsa\source\repos\Git\.NetCore\DemoDockerComposeOnAzure\WeatherPortal\Pages\_ViewImports.cshtml"
using WeatherPortal;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"f7d2749b87c136fb5bdfa04a5d164da3f2f6a301", @"/Pages/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"7fa62c0446c3764bd982e02aba87e959a84babf8", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Index : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/weather.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "C:\Users\adsa\source\repos\Git\.NetCore\DemoDockerComposeOnAzure\WeatherPortal\Pages\Index.cshtml"
  
    ViewData["Title"] = "Main";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "f7d2749b87c136fb5bdfa04a5d164da3f2f6a3013902", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<div class=\"text-center\">\r\n    <h1 class=\"display-4\">Oslo</h1>\r\n\r\n    <p id=\"myjosn\" style=\"display:none;\">");
#nullable restore
#line 14 "C:\Users\adsa\source\repos\Git\.NetCore\DemoDockerComposeOnAzure\WeatherPortal\Pages\Index.cshtml"
                                    Write(ViewData["Message"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</p>


    <div class=""containerex"" id=""mydiv"">
    </div>

    <br />
    <p>
        Credit (weather template): Colin Espinas  https://codepen.io/Call_in <br />
        Weather API: Meteorologisk institutt  https://www.met.no/
    </p>
    <br />
    <p> Azure - Docker compose sample</p>
</div>

<script type=""text/javascript"">
    loadData();
    function loadData() {
        var obj, dbParam, xmlhttp, myObj, x, txt = """", firstitem;

        var check = document.getElementById('myjosn');
        var tempjson = JSON.parse(check.innerHTML);//finlly
        try {
            myObj = JSON.parse(tempjson);
        } catch (e) {
            myObj = tempjson;//case dummy
        }

        if (myObj != null && myObj.length > 0) {//we ahve data

            txt += getweathersidehtml(myObj[0]);
            txt += "" <div class='info-side'>"";
            txt += getweatherinfohtml(myObj[0]);
            //txt += Getweakcontainer(myObj[0]);
            txt += GetLocationHtml();
       ");
            WriteLiteral(@"     txt += ""</div>"";

            setTimeout(function () { setBackgroundColo(); }, 900);

        }

        document.getElementById(""mydiv"").innerHTML = txt;
    }

    function getweathersidehtml(wsobj) {

        var html = ""<div class='weather-side'>"" +
            ""<div class='weather-gradient' ></div >"" +
            ""<div class='date-container'>"" +
            ""<h2 class='date-dayname'>"" + wsobj.dayText + ""</h2><span class='date-day'>"" + wsobj.dateYearString + ""</span><i class='location-icon' data-feather='map-pin'>"" +
            ""</i>"" +
            ""</div>"" +
            ""<div class='weather-container'>"" +
            ""<img src='"" + GetImagePathByKey(wsobj.summary.symbol_code) + ""' width='180' height='180' id='myimg_'/>"" +
            ""<i class='weather-icon' data-feather='sun'></i>"" +
            ""<h1 class='weather-temp'>"" + wsobj.instant.details.air_temperature + ""</h1>"" +
            ""<h3 class='weather-desc'>"" + wsobj.summary.symbol_code + ""</h3>"" +
            ""</div>"" +");
            WriteLiteral(@"
            ""</div >"";
        return html;
    }

    function getweatherinfohtml(wobj) {


        var text = ""<div class='today-info - container'>"" +
            ""<div class='today-info' >"" +
            ""<div class='precipitation'>"" +
            ""<span class='title'>PRECIPITATION</span><span class='value'>"" + wobj.preception + "" %</span>"" +
            ""<div class='clear'></div>"" +
            ""</div>"" +
            ""<div class='humidity'>"" +
            ""<span class='title'>HUMIDITY</span><span class='value'>"" + wobj.instant.details.relative_humidity + "" %</span>"" +
            ""<div class='clear'></div>"" +
            "" </div>"" +
            "" <div class='wind'>"" +
            "" <span class='title'>WIND</span><span class='value'>"" + wobj.instant.details.wind_speed + "" m/s</span>"" +
            ""<div class='clear'></div>"" +
            "" </div>"" +
            ""</div >"" +
            ""</div > ""
        return text;
    }

    function Getweakcontainer(tobj) {

        var we");
            WriteLiteral(@"ek = ""<div class='week-container'>"" +
            ""<ul class='week-list'>"" +
            ""<li class='active'><i class='day-icon' data-feather='sun'></i><span class='day-name'>Tue</span><span class='day-temp'>29째C</span></li>"" +
            ""<li><i class='day-icon' data-feather='cloud'></i><span class='day-name'>Wed</span><span class='day-temp'>21째C</span></li>"" +
            ""<li><i class='day-icon' data-feather='cloud-snow'></i><span class='day-name'>Thu</span><span class='day-temp'>08째C</span></li>"" +
            ""<li><i class='day-icon' data-feather='cloud-rain'></i><span class='day-name'>Fry</span><span class='day-temp'>19째C</span></li>"" +
            ""<div class='clear'></div>"" +
            ""</ul>"" +
            ""</div>""
        return week;
    }

    function GetLocationHtml() {

        var tetx = ""<div class='location-container'>"" +
            ""<span style='font-size:larger;'>Norway - Oslo</span>"" +
            "" </div>"";
        return tetx;
    }
    function GetImagePathByKey(");
            WriteLiteral(@"value) {

        return ""/wicons/png/"" + value + "".png"";
    }

    function setBackgroundColo() {
        var img_ = document.getElementById(""myimg_"");
        var rgb = getAverageRGB(img_);

        var myList = document.getElementsByClassName(""weather-gradient""); // get all p elements

        // this loops through them until it finds one with the class 'icontitle' then it assigns the style to it
        var i = 0;
        while (i < myList.length) {
            if (myList[i].className == ""weather-gradient"") {
                myList[i].style.backgroundColor = 'rgb(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ')';
            }
            i++;
        }
    }

    function getAverageRGB(imgEl) {

        var blockSize = 5, // only visit every 5 pixels
            defaultRGB = { r: 0, g: 0, b: 0 }, // for non-supporting envs
            canvas = document.createElement('canvas'),
            context = canvas.getContext && canvas.getContext('2d'),
            data, width, height,
     ");
            WriteLiteral(@"       i = -4,
            length,
            rgb = { r: 0, g: 0, b: 0 },
            count = 0;

        if (!context) {
            return defaultRGB;
        }

        height = canvas.height = imgEl.naturalHeight || imgEl.offsetHeight || imgEl.height;
        width = canvas.width = imgEl.naturalWidth || imgEl.offsetWidth || imgEl.width;

        context.drawImage(imgEl, 0, 0);

        try {
            data = context.getImageData(0, 0, width, height);
        } catch (e) {
        /* security error, img on diff domain */alert('x');
            return defaultRGB;
        }

        length = data.data.length;

        while ((i += blockSize * 4) < length) {
            ++count;
            rgb.r += data.data[i];
            rgb.g += data.data[i + 1];
            rgb.b += data.data[i + 2];
        }

        // ~~ used to floor values
        rgb.r = ~~(rgb.r / count);
        rgb.g = ~~(rgb.g / count);
        rgb.b = ~~(rgb.b / count);

        return rgb;

    }
</s");
            WriteLiteral("cript>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IndexModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel>)PageContext?.ViewData;
        public IndexModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
